{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/pages/About.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","headerStyle","className","to","background","color","textAlign","padding","TodoItem","getStyle","borderBottom","textDecoration","props","todo","completed","this","id","title","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","key","About","Fragment","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","App","totalTodos","axios","delete","then","res","filter","post","data","get","exact","path","render","component","React","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68bb66a1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>TodoList</h1>\r\n      <Link className=\"link\" to=\"/\">\r\n        Home\r\n      </Link>\r\n      {\"  \"}|{\"  \"}\r\n      <Link className=\"link\" to=\"/about\">\r\n        About\r\n      </Link>\r\n    </header>\r\n  );\r\n}\r\n\r\nconst headerStyle = {\r\n  background: \"#333\",\r\n  color: \"#fff\",\r\n  textAlign: \"center\",\r\n  padding: \"10px\",\r\n};\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      background: \"#f4f4f4\",\r\n      padding: \"10px\",\r\n      borderBottom: \"1px #ccc dotted\",\r\n      textDecoration: this.props.todo.completed ? \"line-through\" : \"none\",\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.markComplete.bind(this, id)}\r\n          />\r\n          {\"  \"}\r\n          {title}\r\n          <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>\r\n            x\r\n          </button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nconst btnStyle = {\r\n  background: \"#ff0000\",\r\n  color: \"#fff\",\r\n  border: \"none\",\r\n  padding: \"5px 9px\",\r\n  borderRadius: \"50%\",\r\n  cursor: \"pointer\",\r\n  float: \"right\",\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    return this.props.todos.map((todo) => (\r\n      <TodoItem\r\n        key={todo.id}\r\n        todo={todo}\r\n        delTodo={this.props.delTodo}\r\n        markComplete={this.props.markComplete}\r\n      />\r\n    ));\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Todos;\r\n","import React from \"react\";\r\n\r\nexport default function About() {\r\n  return (\r\n    <React.Fragment>\r\n      <h1>About</h1>\r\n      <p>\r\n        This is the TodoList app v1.0.0. It is part of a react crash course.\r\n      </p>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class AddTodo extends Component {\r\n  state = {\r\n    title: \"\",\r\n  };\r\n\r\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title);\r\n    this.setState({ title: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{ display: \"flex\" }}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Add Todo...\"\r\n          value={this.state.title}\r\n          style={{ flex: \"10\", padding: \"5px\" }}\r\n          onChange={this.onChange}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Submit\"\r\n          className=\"btn\"\r\n          style={{ flex: \"1\" }}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n  addTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Header from \"./components/layout/Header\";\nimport Todos from \"./components/Todos\";\nimport About from \"./components/pages/About\";\nimport AddTodo from \"./components/AddTodo\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  state = {\n    totalTodos: 11,\n    todos: [],\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\n      .then((res) => this.setState({ todos: res.data }));\n  }\n\n  markComplete = (id) => {\n    var num = 0;\n    this.setState({\n      todos: this.state.todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      }),\n    });\n  };\n\n  delTodo = (id) => {\n    axios\n      .delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then((res) =>\n        this.setState({\n          todos: [...this.state.todos.filter((todo) => todo.id !== id)],\n        })\n      );\n  };\n\n  addTodo = (title) => {\n    this.setState({ totalTodos: this.state.totalTodos + 1 });\n    axios\n      .post(\"https://jsonplaceholder.typicode.com/todos\", {\n        title,\n        completed: false,\n      })\n      .then((res) => {\n        res.data.id = this.state.totalTodos;\n        this.setState({ todos: [...this.state.todos, res.data] });\n      });\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route\n              exact\n              path=\"/\"\n              render={(props) => (\n                <React.Fragment>\n                  <AddTodo addTodo={this.addTodo} />\n                  <Todos\n                    todos={this.state.todos}\n                    delTodo={this.delTodo}\n                    markComplete={this.markComplete}\n                  />\n                </React.Fragment>\n              )}\n            />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}